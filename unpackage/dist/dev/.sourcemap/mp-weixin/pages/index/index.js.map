{"version":3,"sources":["uni-app:///main.js",null,"webpack:///E:/other/diaoyan/ar/test-ar-markup/pages/index/index.vue?2cb1","webpack:///E:/other/diaoyan/ar/test-ar-markup/pages/index/index.vue?61d4","webpack:///E:/other/diaoyan/ar/test-ar-markup/pages/index/index.vue?6bca","uni-app:///pages/index/index.vue","webpack:///E:/other/diaoyan/ar/test-ar-markup/pages/index/index.vue?2ef6","webpack:///E:/other/diaoyan/ar/test-ar-markup/pages/index/index.vue?6776"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page"],"mappings":";;;;;;;;;;;;;;;;;;;;;kDAAA;;;AAGA;AACA,4F,8FAHA;AACAA,EAAE,CAACC,iCAAH,GAAuCC,mBAAvC,CAGAC,UAAU,CAACC,cAAD,CAAV,C;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkH;AAClH;AACyD;AACL;AACa;;;AAGjE;AACsM;AACtM,gBAAgB,uMAAU;AAC1B,EAAE,2EAAM;AACR,EAAE,gFAAM;AACR,EAAE,yFAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,oFAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAixB,CAAgB,ivBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0BryB;AACA,4BADA,GACA;AACA,4BAFA,GAEA;AACA,0BAHA,GAGA;AACA,gBAJA;AAKA,8BALA;AAMA,6BANA,GAMA;AACA,GAPA;;AASA;AACA,0BADA,GACA;AACA,4BAFA,GAEA;AACA,0BAHA,GAGA;AACA,cAJA;AAKA,kDALA,GAKA;AACA,GANA;AAOA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EADA,EACA,EADA,EACA,EADA;AAEA,EAFA,EAEA,EAFA,EAEA,EAFA;AAGA,EAHA,EAGA,EAHA,EAGA,EAHA;AAIA,EAJA,EAIA,EAJA,EAIA,EAJA;AAKA,EALA,EAKA,EALA,EAKA,EALA;AAMA,EANA,EAMA,EANA,EAMA,EANA;AAOA,EAPA,EAOA,EAPA,EAOA,EAPA;AAQA,EARA,EAQA,EARA,EAQA,EARA;AASA,EATA,EASA,EATA,EASA,GATA;AAUA,GAVA,EAUA,EAVA,EAUA,EAVA;AAWA,EAXA,EAWA,EAXA,EAWA,EAXA;AAYA,EAZA,EAYA,EAZA,EAYA,GAZA;AAaA,EAbA,EAaA,GAbA,EAaA,EAbA;AAcA,EAdA,EAcA,GAdA,EAcA,GAdA;AAeA,EAfA,EAeA,GAfA,EAeA,EAfA;AAgBA,EAhBA,EAgBA,GAhBA,EAgBA,GAhBA;AAiBA,EAjBA,EAiBA,GAjBA,EAiBA,EAjBA;AAkBA,EAlBA,EAkBA,GAlBA,EAkBA,EAlBA;AAmBA,EAnBA,EAmBA,GAnBA,EAmBA,GAnBA;AAoBA,EApBA,EAoBA,GApBA,EAoBA,EApBA;;;AAuBA;AACA;AACA,EADA,EACA,EADA;AAEA,EAFA,EAEA,EAFA;AAGA,EAHA,EAGA,EAHA;AAIA,EAJA,EAIA,EAJA;AAKA,EALA,EAKA,EALA;AAMA,EANA,EAMA,EANA;AAOA,EAPA,EAOA,EAPA;AAQA,EARA,EAQA,EARA;AASA,EATA,EASA,EATA;AAUA,EAVA,EAUA,EAVA;AAWA,EAXA,EAWA,GAXA;AAYA,GAZA,EAYA,EAZA;AAaA,EAbA,EAaA,GAbA;AAcA,EAdA,EAcA,GAdA;AAeA,GAfA,EAeA,EAfA;AAgBA,EAhBA,EAgBA,GAhBA;AAiBA,GAjBA,EAiBA,EAjBA;AAkBA,EAlBA,EAkBA,GAlBA;AAmBA,GAnBA,EAmBA,EAnBA;AAoBA,EApBA,EAoBA,GApBA;;;AAuBA;AACA;AACA,CADA,EACA,GADA;AAEA,KAFA,EAEA,KAFA;AAGA,KAHA,EAGA,KAHA;AAIA,GAJA,EAIA,KAJA;AAKA,KALA,EAKA,KALA;AAMA,KANA,EAMA,KANA;AAOA,CAPA,EAOA,GAPA;AAQA,KARA,EAQA,KARA;AASA,KATA,EASA,IATA;AAUA,GAVA,EAUA,KAVA;AAWA,KAXA,EAWA,IAXA;AAYA,KAZA,EAYA,KAZA;AAaA,KAbA,EAaA,KAbA;AAcA,KAdA,EAcA,KAdA;AAeA,GAfA,EAeA,KAfA;AAgBA,KAhBA,EAgBA,KAhBA;AAiBA,KAjBA,EAiBA,KAjBA;AAkBA,KAlBA,EAkBA,KAlBA;AAmBA,GAnBA,EAmBA,KAnBA;AAoBA,KApBA,EAoBA,KApBA;;;AAuBA;AACA;AACA;AACA,IAHA,EAGA,GAHA,EAGA,GAHA,EAGA,GAHA;AAIA,IAJA,EAIA,IAJA,EAIA,GAJA,EAIA,GAJA;AAKA,GALA,EAKA,IALA,EAKA,GALA,EAKA,GALA;AAMA,GANA,EAMA,IANA,EAMA,GANA,EAMA,GANA;AAOA,GAPA,EAOA,GAPA,EAOA,GAPA,EAOA,GAPA;AAQA,IARA,EAQA,GARA,EAQA,GARA,EAQA,GARA;;AAUA;AACA,IADA,EACA,GADA,EACA,GADA,EACA,GADA,EACA,GADA;AAEA,IAFA,EAEA,IAFA,EAEA,GAFA,EAEA,GAFA,EAEA,GAFA;AAGA,GAHA,EAGA,IAHA,EAGA,GAHA,EAGA,GAHA,EAGA,GAHA;AAIA,GAJA,EAIA,IAJA,EAIA,GAJA,EAIA,GAJA,EAIA,GAJA;AAKA,GALA,EAKA,GALA,EAKA,GALA,EAKA,GALA,EAKA,GALA;AAMA,IANA,EAMA,GANA,EAMA,GANA,EAMA,GANA,EAMA,GANA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;eACA;AACA,uBADA;AAEA,MAFA,kBAEA;AACA;AACA,gBADA;AAEA;AACA,gBADA;AAEA,iBAFA;AAGA,cAHA;AAIA,eAJA;AAKA,qBALA,EAFA;;AASA,cATA;AAUA,kBAVA;AAWA,2BAXA,EAWA;AACA,oBAZA,EAYA;AACA,oBAbA;AAcA;AACA,kBADA;AAEA,mBAFA;AAGA,mBAHA;AAIA,mBAJA;AAKA,mBALA;AAMA,mBANA;AAOA,mBAPA;AAQA,mBARA;AASA,kBATA;AAUA,mBAVA;AAWA,kBAXA;AAYA,mBAZA;AAaA,mBAbA;AAcA,mBAdA;AAeA,mBAfA;AAgBA,mBAhBA;AAiBA,mBAjBA;AAkBA,kBAlBA;AAmBA,mBAnBA;AAoBA,mBApBA;AAqBA,mBArBA;AAsBA,mBAtBA;AAuBA,mBAvBA;AAwBA,mBAxBA;AAyBA,iBAzBA;AA0BA,mBA1BA;AA2BA,mBA3BA;AA4BA,mBA5BA;AA6BA,kBA7BA;AA8BA,mBA9BA;AA+BA,mBA/BA;AAgCA,mBAhCA;AAiCA,mBAjCA;AAkCA,kBAlCA;AAmCA,mBAnCA;AAoCA,mBApCA;AAqCA,mBArCA;AAsCA,mBAtCA;AAuCA,mBAvCA;AAwCA,mBAxCA,CAdA;;AAwDA,sBAxDA;AAyDA,0DAzDA;AA0DA,oDA1DA;AA2DA;AACA;AACA,wBA7DA;AA8DA,6BA9DA;AA+DA;AACA,UADA,EACA,GADA,EACA,GADA,EACA,GADA,EACA,GADA;AAEA,UAFA,EAEA,IAFA,EAEA,GAFA,EAEA,GAFA,EAEA,GAFA;AAGA,SAHA,EAGA,GAHA,EAGA,GAHA,EAGA,GAHA,EAGA,GAHA;AAIA,SAJA,EAIA,IAJA,EAIA,GAJA,EAIA,GAJA,EAIA,GAJA,EA/DA;;AAqEA,GAxEA;AAyEA,WAzEA;AA0EA,gBA1EA;AA2EA,cA3EA;AA4EA,SA5EA,qBA4EA;AACA;AACA;AACA,GA/EA;;AAiFA,SAjFA,qBAiFA,EAjFA;AAkFA;AACA,WADA,mBACA,CADA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OANA,MAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAFA,EAEA,IAFA;;AAIA,KAvCA;AAwCA,cAxCA,wBAwCA;;;;AAIA;AACA;AACA,cADA,CACA,WADA;AAEA,YAFA;AAGA,YAHA,CAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAFA;AAGA,cAHA,CAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAZA,EAYA,KAZA,CAYA;AACA;AACA,WAdA;;AAgBA,SAzCA;AA0CA,OA3CA,CA2CA;AACA;AACA;AACA;;;AAGA;AACA,KA9FA;AA+FA,iBA/FA,yBA+FA,EA/FA,EA+FA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA,KAjKA;AAkKA,kBAlKA,4BAkKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KArLA;AAsLA,sBAtLA,gCAsLA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;AACA,yDAzBA,CAyBA;AACA,oDA1BA,CA0BA;AACA,uCA3BA,CA2BA;;AAEA;;AAEA,2DA/BA,CA+BA;AACA,oDAhCA,CAgCA;AACA,uCAjCA,CAiCA;AACA;;AAEA,6CApCA,CAoCA;AACA,yDArCA,CAqCA;AACA,yDAtCA,CAsCA;AACA,wCAvCA,CAuCA;AACA,uCAxCA,CAwCA;AACA;;;AAGA,KAlOA;AAmOA,YAnOA,oBAmOA,GAnOA,EAmOA;AACA;AACA;AACA;;AAEA;AACA,2CANA,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6EAlBA,CAkBA;AACA,+CAnBA,CAmBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCA3BA,CA2BA;AACA;AACA;AACA;AACA;AACA;AACA,oCAjCA,CAiCA;AACA,mDAlCA,CAkCA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA,KApRA;AAqRA,qBArRA,+BAqRA;AACA;AACA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA/VA;AAgWA,WAhWA,mBAgWA,GAhWA,EAgWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EA5DA,CA4DA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,KAzaA;AA0aA,sBA1aA,gCA0aA;AACA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AAWA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,KAnmBA;AAomBA,2BApmBA,qCAomBA;AACA;AACA;AACA;AACA,KAxmBA;AAymBA,yBAzmBA,mCAymBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApnBA;;AAsnBA,eAtnBA,uBAsnBA,MAtnBA,EAsnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KA5rBA;AA6rBA,kBA7rBA,0BA6rBA,cA7rBA,EA6rBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SARA;AASA;AACA;AACA;AACA,SAHA;AAIA;AACA,OAlBA;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAruBA;;AAuuBA,kBAvuBA,0BAuuBA,IAvuBA,EAuuBA,KAvuBA,EAuuBA,MAvuBA,EAuuBA;AACA;AACA;AACA;AACA,KA3uBA;AA4uBA,mBA5uBA,6BA4uBA;AACA;AACA;AACA,8BADA;AAEA;AACA;AACA;AACA,gCADA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAVA;AAWA;AACA;AACA;AACA,eAdA;;AAgBA,WApBA;AAqBA;AACA;AACA,WAvBA;;AAyBA,OA1BA;;AA4BA,KAzwBA;AA0wBA,kBA1wBA,0BA0wBA,MA1wBA,EA0wBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAFA;AAGA,8CAHA;AAIA,4BAJA;AAKA,SANA;;AAQA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iDADA;AAEA,SAHA;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAr2BA;AAs2BA,oBAt2BA,4BAs2BA,MAt2BA,EAs2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AAOA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;AAOA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,KAx8BA;AAy8BA,aAz8BA,uBAy8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAlBA;AAmBA;AACA;AACA,OAFA;AAGA;;;AAGA,KAx+BA;AAy+BA,cAz+BA,sBAy+BA,EAz+BA,EAy+BA;;AAEA;AACA,2DAHA,CAGA;AACA,oDAJA,CAIA;AACA,qCALA,CAKA;;AAEA,+DAPA,CAOA;AACA,sDARA,CAQA;AACA,uCATA,CASA;;;AAGA,6CAZA,CAYA;AACA,mDAbA,CAaA;AACA,qDAdA,CAcA;;AAEA,oCAhBA,CAgBA;AACA,mCAjBA,CAiBA;AACA;AACA;AACA,KA7/BA;AA8/BA,eA9/BA,uBA8/BA,EA9/BA,EA8/BA,GA9/BA,EA8/BA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAxiCA;AAyiCA,gBAziCA,wBAyiCA,EAziCA,EAyiCA,GAziCA,EAyiCA;;AAEA,yCAFA,CAEA;;AAEA;AACA;AACA;AACA;;;AAGA,gDAVA,CAUA;AACA,oCAXA,CAWA;AACA,+CAZA,CAYA;AACA,wEAbA,CAaA;AACA;AACA;AACA;AACA;;AAEA,+EAnBA,CAmBA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BA1BA,CA0BA;;AAEA;AACA,KAtkCA,EAlFA;;AA0pCA,SA1pCA,qBA0pCA,EA1pCA;AA2pCA,QA3pCA,oBA2pCA;AACA;AACA;AACA;AACA,GA/pCA;AAgqCA,QAhqCA,oBAgqCA,qQAhqCA;AAiqCA,eAjqCA,2BAiqCA;AACA;AACA;AACA,GApqCA;AAqqCA,mBArqCA,+BAqqCA,EArqCA;AAsqCA,iBAtqCA,6BAsqCA;AACA;AACA,sBADA;AAEA,0BAFA;AAGA,kBAHA;;AAKA,GA5qCA;AA6qCA,UA7qCA,sBA6qCA,EA7qCA;AA8qCA,QA9qCA,oBA8qCA,EA9qCA,E;;;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AAAA;AAA0mC,CAAgB,0hCAAG,EAAC,C;;;;;;;;;;ACA9nC;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/index/index.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;\nimport Vue from 'vue'\nimport Page from './pages/index/index.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./index.vue?vue&type=template&id=57280228&\"\nvar renderjs\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/index/index.vue\"\nexport default component.exports","export * from \"-!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--16-0!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=template&id=57280228&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-1!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--12-1!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"","<template>\r\n\t<view class=\"container\">\r\n\t<image\r\n\t\t:src=\"imgModel\"\r\n\t\tclass=\"mode-img\"\r\n\t\t\r\n\t\t:style=\"{ width: canvasObj.width + 'px', height: canvasObj.height + 'px', top: canvasObj.top + 'px', left: canvasObj.left + 'px' }\"\r\n\t></image>\r\n\t<button style=\"position: absolute;top: 100px; \"> 哈哈哈</button>\r\n\t<!-- h5、app-vue 中单个尺寸过大的 canvas 在 iOS/Safari 无法绘制（具体限制尺寸未公布） -->\r\n\t<canvas\r\n\t\tid=\"arcanvas\"\r\n\t\tclass=\"arcanvas\"\r\n\t\ttype=\"webgl\"\r\n\t\t@ready.native=\"onCanvasReady('arcanvas')\"\r\n\t\t:style=\"{ width: canvasObj.width + 'px', height: canvasObj.height + 'px', top: canvasObj.top + 'px', left: canvasObj.left + 'px' }\"\r\n\t></canvas>\r\n\t<button style=\"position: absolute;top: 200px; z-index: 22;\"> 略略</button>\r\n\t\r\n\t</view>\r\n</template>\r\n<!-- \r\n 此版本微信没有问题，目前是ios和安卓都可以\r\n \r\n -->\r\n<script>\r\n\tvar VSHADER_SOURCE = \"\" +\r\n\t  \"attribute vec4 a_position;\" +//\r\n\t  \"attribute vec2 a_texCoord;\" +//\r\n\t  \"varying vec2 v_texCoord;\" +//\r\n\t  \"void main(){\\n\" +\r\n\t  \"   gl_Position = a_position;\" +\r\n\t  \"   v_texCoord = a_texCoord;\" +//\r\n\t  \"}\";\r\n\t\r\n\tvar FSHADER_SOURCE = \"\" +\r\n\t  \"precision mediump float;\" +//\r\n\t  \"uniform sampler2D u_image;\" +//\r\n\t  \"varying vec2 v_texCoord;\" +//\r\n\t  \"void main(){\" +\r\n\t  \"   gl_FragColor = texture2D(u_image,v_texCoord);\" +//\r\n\t  \"}\";\r\nvar canvas;\r\nvar gl;\r\n\r\nvar w = 0;\r\nvar h = 0;\r\n\r\n//唇彩特效透明度\r\nvar translucent;\r\nvar translucentBase = 1;\r\n\r\n//唇彩图片\nvar img;\n//唇彩图片路径\nvar imgPath;\r\n\r\n//德劳内三角化退化成查找表\r\nconst lipIndex = new Int32Array([\r\n  84, 85, 96,\r\n  96, 85, 97,\r\n  97, 85, 86,\r\n  97, 86, 87,\r\n  97, 87, 98,\r\n  98, 87, 88,\r\n  98, 88, 99,\r\n  99, 88, 89,\r\n  99, 89, 100,\r\n  100, 89, 90,\r\n  84, 96, 95,\r\n  95, 96, 103,\r\n  95, 103, 94,\r\n  94, 103, 102,\r\n  94, 102, 93,\r\n  93, 102, 101,\r\n  93, 101, 92,\r\n  92, 101, 91,\r\n  91, 101, 100,\r\n  91, 100, 90\r\n    ]);\r\n\r\n//关键点缩放的点对索引\nconst lipScaleIndex = new Int32Array([\n  84, 96,\n  96, 84,\n  85, 97,\n  86, 97,\n  97, 86,\n  87, 98,\n  98, 87,\n  88, 99,\n  99, 88,\n  89, 99,\n  90, 100,\n  100, 90,\n  91, 101,\n  92, 101,\n  101, 92,\n  93, 102,\n  102, 93,\n  94, 103,\n  103, 94,\n  95, 103\n    ]);\r\n\t\r\n//纹理坐标\r\nconst lipTexCoordnate = new Float32Array([\r\n    0, 0.5,\r\n    0.153, 0.686,\r\n    0.368, 0.741,\r\n    0.5, 0.693,\r\n    0.632, 0.741,\r\n    0.847, 0.686,\r\n    1, 0.5,\r\n    0.863, 0.311,\r\n    0.677, 0.24,\r\n    0.5, 0.212,\r\n    0.323, 0.24,\r\n    0.137, 0.311,\r\n    0.072, 0.499,\r\n    0.363, 0.504,\r\n    0.5, 0.488,\r\n    0.637, 0.504,\r\n    0.928, 0.499,\r\n    0.637, 0.475,\r\n    0.5, 0.464,\r\n    0.363, 0.475\r\n  ]);\r\n\r\nconst quadVertex = new Float32Array([\r\n\t//顶点坐标   纹理坐标\r\n\t//------\\\\ //----\\\\\r\n    -1.0, 1.0, 0.0, 0.0,\r\n    -1.0, -1.0, 0.0, 1.0,\r\n    1.0, -1.0, 1.0, 1.0,\r\n    1.0, -1.0, 1.0, 1.0,\r\n    1.0, 1.0, 1.0, 0.0,\r\n    -1.0, 1.0, 0.0, 0.0]);\r\n\r\nconst lipVertex = new Float32Array([\r\n    -1.0, 1.0, 0.0, 0.0, 1.0,\r\n    -1.0, -1.0, 0.0, 1.0, 1.0,\r\n    1.0, -1.0, 1.0, 1.0, 1.0,\r\n    1.0, -1.0, 1.0, 1.0, 1.0,\r\n    1.0, 1.0, 1.0, 0.0, 1.0,\r\n    -1.0, 1.0, 0.0, 0.0, 1.0]);\r\n//render resource\r\nvar vertShader;\nvar fragShader;\nvar shaderProgram;\nvar quadVertShader;\nvar quadFragShader;\nvar quadShaderProgram;\nvar vertexbuffer;\nvar quadVertexbuffer;\nvar lipPoints;\nvar lipPointsIndex;\nvar lipPointsScale;\nvar lipPointsUnScale;\nvar lipTexture;\nvar cameraTexture;\r\nvar lipMarkBeginIndex = 84;\r\nvar dataFrame;\r\n//嘴唇面片缩放系数\nvar lipScale;\r\n// var points = []\r\nexport default {\r\n\tname: 'ar-camera-com',\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tpoints:[],\r\n\t\t\tcanvasObj: {\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\ttop: 0,\r\n\t\t\t\tleft: 0,\r\n\t\t\t\tpixelRatio: 1\r\n\t\t\t},\r\n\t\t\tgl: null,\r\n\t\t\tcanvas: null,\r\n\t\t\tlipMarkBeginIndex: 84, //阿里ar sdk嘴唇关键点起始索引\r\n\t\t\tlipScale: null, //嘴唇面片缩放系数\r\n\t\t\tfacePoints: {},\r\n\t\t\tpoints84By63: [\r\n\t\t\t\t957.50409482,\r\n\t\t\t\t2048.25090186,\r\n\t\t\t\t1024.20328954,\r\n\t\t\t\t2021.00354189,\r\n\t\t\t\t1100.35535717,\r\n\t\t\t\t1996.00218737,\r\n\t\t\t\t1145.56652331,\r\n\t\t\t\t2007.07288401,\r\n\t\t\t\t1189.2633217,\r\n\t\t\t\t1996.04795256,\r\n\t\t\t\t1261.4984701,\r\n\t\t\t\t2017.43906306,\r\n\t\t\t\t1325.22831509,\r\n\t\t\t\t2046.56618589,\r\n\t\t\t\t1276.55727626,\r\n\t\t\t\t2093.84743997,\r\n\t\t\t\t1224.39282784,\r\n\t\t\t\t2134.3206981,\r\n\t\t\t\t1144.65582022,\r\n\t\t\t\t2144.29859945,\r\n\t\t\t\t1069.32946318,\r\n\t\t\t\t2129.80846816,\r\n\t\t\t\t1011.42414683,\r\n\t\t\t\t2094.29104754,\r\n\t\t\t\t988.1676205,\r\n\t\t\t\t2055.62188232,\r\n\t\t\t\t1054.90785861,\r\n\t\t\t\t2052.97282839,\r\n\t\t\t\t1152.7350715,\r\n\t\t\t\t2054.15642762,\r\n\t\t\t\t1241.12630101,\r\n\t\t\t\t2056.98369944,\r\n\t\t\t\t1299.69763407,\r\n\t\t\t\t2046.2361438,\r\n\t\t\t\t1237.68592091,\r\n\t\t\t\t2062.30674812,\r\n\t\t\t\t1145.72936507,\r\n\t\t\t\t2071.47383073,\r\n\t\t\t\t1024.20328954,\r\n\t\t\t\t2021.00354189\r\n\t\t\t],\r\n\t\t\ttranslucent: 0.5,\r\n\t\t\timgLipstick: '/static/images/ar-makup/lipColor1.png',\r\n\t\t\timgModel: '/static/images/ar-makup/model1.jpg',\r\n\t\t\t// imgLipstick: 'https://cdn-mdj.oss-cn-beijing.aliyuncs.com/common/test-ar-makeup/lipColor1.png',\r\n\t\t\t// imgModel: 'https://cdn-mdj.oss-cn-beijing.aliyuncs.com/common/test-ar-makeup/model.jpg',\r\n\t\t\tisFaceBeauty: true,\r\n\t\t\tisShowFacePoints: false,\r\n\t\t\t vertexs: new Float32Array([\r\n\t\t\t      -1.0, 1.0, 0.0, 0.0, 1.0,\r\n\t\t\t      -1.0, -1.0, 0.0, 0.0, 0.0,\r\n\t\t\t      1.0, 1.0, 0.0, 1.0, 1.0,\r\n\t\t\t      1.0, -1.0, 0.0, 1.0, 0.0])\r\n\t\t};\r\n\t},\r\n\tprops: {},\r\n\tcomponents: {},\r\n\tcomputed: {},\r\n\tcreated() {\r\n\t\t// this.setCanvasWh();\r\n\t\tthis.imgLoad()\r\n\t},\r\n\t\r\n\tonReady() {},\r\n\tmethods: {\r\n\t\timgLoad(e) {\r\n\t\t\t// console.log(e, 'width', e.detail.width);\r\n\t\t\t// console.log('height：', e.detail.height);\r\n\t\t\tthis.handleARFrame1();\r\n\t\t\tvar self = this;\r\n\t\t\ttranslucent = 0.5;\r\n\t\t\tlipMarkBeginIndex = this.lipMarkBeginIndex = 84;\r\n\t\t\tlipScale = this.lipScale = 0.01;\r\n\t\t\t\r\n\t\t\tvar systemInfo = uni.getSystemInfoSync();\r\n\t\t\tlet wImg = 1389,hImg = 1852;\r\n\t\t\t// this.imgWidth = e.detail.width\r\n\t\t\t// this.imgHeight = e.detail.height\r\n\t\t\tthis.imgWidth = wImg\r\n\t\t\tthis.imgHeight = hImg\r\n\t\t\tlet w =  systemInfo.windowWidth;\r\n\t\t\tlet h =  systemInfo.windowHeight;\r\n\t\t\tlet r = wImg / hImg;\r\n\t\t\tconsole.log(systemInfo, 'getImageInfo', this.canvasObj, w, h, r);\r\n\t\t\tif (w / h < r) {\r\n\t\t\t\t// 表示高是短边,现在宽剧中\r\n\t\t\t\tthis.canvasObj.height = h;\r\n\t\t\t\tthis.canvasObj.width = r * h;\r\n\t\t\t\tthis.canvasObj.top = 0 ;\r\n\t\t\t\tthis.canvasObj.left = (w - this.canvasObj.width) / 2;\r\n\t\t\t} else {\r\n\t\t\t\tthis.canvasObj.width = w;\r\n\t\t\t\tthis.canvasObj.height = w / r;\r\n\t\t\t\tthis.canvasObj.top = (h - this.canvasObj.height) / 2;\r\n\t\t\t\tthis.canvasObj.left = 0;\r\n\t\t\t}\r\n\t\t\tthis.canvasObj.pixelRatio = systemInfo.pixelRatio;\r\n\t\t\tconsole.log(w / h < r, '。。。。。。。this.canvasObj。。。', this.canvasObj);\r\n\t\t\t// #ifdef MP-WEIXIN\r\n\t\t\tsetTimeout(()=>{\r\n\t\t\t\tthis.canvasWxFn();\r\n\t\t\t},1000)\r\n\t\t\t// #endif\r\n\t\t},\r\n\t\tcanvasWxFn() {\r\n\t\t\t\r\n\t\t\t// #ifdef MP-WEIXIN\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\twx.createSelectorQuery()\r\n\t\t\t\t      .select('#arcanvas')\r\n\t\t\t\t      .node()\r\n\t\t\t\t      .exec(res => {\r\n\t\t\t\t\t\tconsole.log('drawAiwendy', res);\r\n\t\t\t\t\t\tconst c = res[0].node;\r\n\t\t\t\t\t\t// if(!c){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\tvar systemInfo = uni.getSystemInfoSync();\r\n\t\t\t\t\t\tconsole.log('。。。systemInfo。。', this.canvasObj, this.canvasObj);\r\n\t\t\t\t\t\tc.height = this.canvasObj.height;\r\n\t\t\t\t\t\tc.width = this.canvasObj.width;\r\n\t\t\t\t\t\tconsole.log(c.width, '。。。。。。。uni.createCanvas。。success。', c);\r\n\t\t\t\t\t\tthis.gl = c.getContext('webgl');\r\n\t\t\t\t\t\tgl = this.gl;\r\n\t\t\t\t\t\tif (!gl) {\r\n\t\t\t\t\t\t  console.log('webgl未受支持');\r\n\t\t\t\t\t\t  return\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.canvas = c;\r\n\t\t\t\t\t\tcanvas = c;\r\n\t\t\t\t\t\tconsole.log(this.points,'。。。。。。。uni.createCanvas。。success。', gl);\r\n\t\t\t\t\t\t// this.renderImg()\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tPromise.all([this.changeLipStyle(this.imgLipstick),\r\n\t\t\t\t\t\t\t// this.updateFaceData1()\r\n\t\t\t\t\t\t\tthis.changeLipStyle(this.imgModel)\r\n\t\t\t\t\t\t]).then(res=>{\r\n\t\t\t\t\t\t\tconsole.log('zhixingwanbi 哈哈哈',res)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis.lipRenderPipeline()\r\n\t\t\t\t\t\t\tthis.quadRenderPipeline();\r\n\t\t\t\t\t\t\tthis.drawQuan(res[1])\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis.drawLip(res[0])\r\n\t\t\t\t\t\t\t// this.drawFacePoints(this.points);\r\n\t\t\t\t\t\t}).catch(err=>{\r\n\t\t\t\t\t\t\tconsole.log('失败 哈哈哈',err)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\t//TODO handle the exception\r\n\t\t\t\tconsole.log('....', e);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// #endif\r\n\t\t\t// this.onCanvasReady('arcanvas')\r\n\t\t},\r\n\t\tonCanvasReady(id){\r\n\t\t\tconsole.log('onCanvasReady kaishi 哈哈哈')\r\n\t\t\t// this.imgLoad();\r\n\t\t\t// #ifdef MP-ALIPAY\r\n\t\t\ttry{\r\n\t\t\t\tmy._createCanvas({\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tsuccess: (c) => {\r\n\t\t\t\t\t\tvar systemInfo = my.getSystemInfoSync();\r\n\t\t\t\t\t\tconsole.log('。。。systemInfo。。',JSON.stringify(systemInfo))\r\n\t\t\t\t\t\t// c.height = 1852;\r\n\t\t\t\t\t\t// c.width = 1389;\r\n\t\t\t\t\t\tconsole.log('。。。。。。。my.createCanvas。。success。',c);\r\n\t\t\t\t\t\tthis.gl = c.getContext('webgl');\r\n\t\t\t\t\t\tgl = this.gl;\r\n\t\t\t\t\t\tthis.canvas = c;\r\n\t\t\t\t\t\tcanvas = c;\r\n\t\t\t\t\t\tthis.renderImg()\r\n\t\t\t\t\t\t// this.drawFacePoints(this.points);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfail:()=>{\r\n\t\t\t\t\t\tconsole.log('。。。。。。。my.createCanvas。。fail。');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t// my._createCanvas({\r\n\t\t\t\t// \tid:'arcanvas',\r\n\t\t\t\t// \tsuccess: (c) => {\r\n\t\t\t\t\t\t\r\n\t\t\t\t// \t\tvar systemInfo = uni.getSystemInfoSync();\r\n\t\t\t\t// \t\tconsole.log('。。。systemInfo。。', this.canvasObj, this.canvasObj);\r\n\t\t\t\t// \t\tc.height = 1852*systemInfo.pixelRatio;\r\n\t\t\t\t// \t\tc.width = 1389*systemInfo.pixelRatio;\r\n\t\t\t\t// \t\tconsole.log(c.width, '。。。。。。。uni.createCanvas。。success。', c);\r\n\t\t\t\t// \t\tthis.gl = c.getContext('webgl');\r\n\t\t\t\t// \t\tgl = this.gl;\r\n\t\t\t\t// \t\tthis.canvas = c;\r\n\t\t\t\t// \t\tcanvas = c;\r\n\t\t\t\t// \t\tconsole.log(this.points,'。。。。。。。uni.createCanvas。。success。', gl);\r\n\t\t\t\t// \t\t// this.renderImg()\r\n\t\t\t\t\t\t\r\n\t\t\t\t// \t\tPromise.all([\r\n\t\t\t\t// \t\t\t// this.changeLipStyle(this.imgLipstick),’\r\n\t\t\t\t// \t\t\tthis.changeLipStyle(this.imgModel)\r\n\t\t\t\t// \t\t]).then(res=>{\r\n\t\t\t\t// \t\t\tconsole.log('zhixingwanbi 哈哈哈',res)\r\n\t\t\t\t// \t\t\t// this.lipRenderPipeline();\r\n\t\t\t\t// \t\t\t// this.quadRenderPipeline();\r\n\t\t\t\t// \t\t\t// this.drawQuan(res[1])\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t// \t\t\t// this.drawLip(res[0])\r\n\t\t\t\t// \t\t\tthis.drawFacePoints(this.points);\r\n\t\t\t\t// \t\t}).catch(err=>{\r\n\t\t\t\t// \t\t\tconsole.log('失败 哈哈哈',err)\r\n\t\t\t\t// \t\t})\r\n\t\t\t\t// \t\t},\r\n\t\t\t\t// \tfail:()=>{\r\n\t\t\t\t// \t\tconsole.log('。。。。。。。my.createCanvas。。fail。');\r\n\t\t\t\t// \t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t// \t})\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.log('。。。。。。。my.createCanvas。。catch。',e);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\r\n\t\t\t// #endif\r\n\t\t},\r\n\t\thandleARFrame1() {\r\n\t\t\tvar rawPoints = this.points84By63.map(item=>item*0.6);\r\n\t\t\tlet len = 106;\r\n\t\t\tfor (var i = 0; i < 84; i++) {\r\n\t\t\t\trawPoints.unshift(0.1, 0.1);\r\n\t\t\t}\r\n\t\t\tfor (var i = 104; i < len; i++) {\r\n\t\t\t\trawPoints.push(0.1, 0.1);\r\n\t\t\t}\r\n\t\t\tfunction transformPoint(point, fw, fh) {\r\n\t\t\t\treturn [(point[0] / fw) * 2 - 1, (1 - point[1] / fh) * 2 - 1];\r\n\t\t\t}\r\n\t\t\tvar points = []\r\n\r\n\t\t\tfor (var i = 0; i < 106; i++) {\r\n\t\t\t\tpoints.push(transformPoint([rawPoints[i * 2], rawPoints[i * 2 + 1]], this.imgWidth, this.imgHeight));\r\n\t\t\t}\r\n\t\t\tconsole.log(points,'...gl 出来了么....')\r\n\t\t\tthis.points = points;\r\n\t\t},\r\n\t\tquadRenderPipeline() {\r\n\t\t\t/*=========================Shaders========================*/\r\n\t\t\tconst FSIZE = 4;\r\n\t\t\tvar quadVertCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      layout(location = 0) in vec2 a_position;\r\n\t\t\t      layout(location = 1) in vec2 a_uv;\r\n\t\t\t      out vec2 uv_out;\r\n\t\t\t      void main() {\r\n\t\t\t        gl_Position = vec4(a_position, 1.0, 1.0);\r\n\t\t\t        uv_out = a_uv;\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\tconst quadFragCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      precision mediump float;\r\n\t\t\t      in vec2 uv_out;\r\n\t\t\t      uniform sampler2D u_texture;\r\n\t\t\t      layout(location = 0) out vec4 outColor;\r\n\t\t\t      void main() {\r\n\t\t\t        vec2 uv = vec2(uv_out.x, uv_out.y);\r\n\t\t\t        outColor = vec4(texture(u_texture, uv).xyz, 1.0);\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\t\t  console.log(\"quadVertShader的值\", quadVertShader);\r\n\t\t\tquadVertShader = gl.createShader(gl.VERTEX_SHADER); // 创建顶点着色器\r\n\t\t\tgl.shaderSource(quadVertShader, quadVertCode); // 绑定顶点着色器源码\r\n\t\t\tgl.compileShader(quadVertShader); // 编译定点着色器\r\n\t\t\t\r\n\t\t\tconsole.log(\"quadVertShader的值1\", quadVertShader);\r\n\t\t\t\r\n\t\t\tquadFragShader = gl.createShader(gl.FRAGMENT_SHADER); // 创建片元着色器\r\n\t\t\tgl.shaderSource(quadFragShader, quadFragCode); // 绑定片元着色器源码\r\n\t\t\tgl.compileShader(quadFragShader); // 编译片元着色器\r\n\t\t\tconsole.log(\"quadFragShader的值\", quadFragShader);\r\n\t\t\t\r\n\t\t\tquadShaderProgram = gl.createProgram();  // 创建着色器程序\r\n\t\t\tgl.attachShader(quadShaderProgram, quadVertShader); // 指定顶点着色器\r\n\t\t\tgl.attachShader(quadShaderProgram, quadFragShader);  // 指定片元着色色器\r\n\t\t\tgl.linkProgram(quadShaderProgram);  // 链接程序\r\n\t\t\tgl.useProgram(quadShaderProgram);  //使用着色器\r\n\t\t\tconsole.log(\"quadShaderProgram 渲染成功否\");\r\n\t\t\t\r\n\t\t\t\r\n\t\t},\r\n\t\tdrawQuan(res){\r\n\t\t\t // gl.useProgram(0);\r\n\t\t\tgl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\t\r\n\t\t\t\r\n\t\t\tconst FSIZE = 4;\r\n\t\t\tquadVertexbuffer = gl.createBuffer(); //  创建缓冲区对象(gl.createBuffer())\r\n\t\t\tif (quadVertexbuffer === null) {\r\n\t\t\t      console.log(\"quadVertexbuffer is null\");\r\n\t\t\t}\r\n\t\t\tconsole.log(\"quadVertexbuffer\", quadVertexbuffer);\r\n\t\t\t// 绑定缓冲区对象(gl.bindBuffer(target, buffer))\r\n\t\t\tgl.disable(gl.BLEND);\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, quadVertexbuffer);\r\n\t\t\t// 将数据写入缓冲区对象(gl.bufferData()) WebGL 不支持直接使用 JavaScript 原始数组类型，需要转换\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, quadVertex, gl.STATIC_DRAW);\r\n\t\t\t\r\n\t\t\tconst qposlocation = gl.getAttribLocation(quadShaderProgram, 'a_position');\r\n\t\t\tgl.vertexAttribPointer(qposlocation, 2, gl.FLOAT, false, FSIZE * 4, 0);  //将顶点坐标的位置赋值\r\n\t\t\tgl.enableVertexAttribArray(qposlocation);    // 赋能-批处理\r\n\t\t\tconsole.log(\"qposlocation\", qposlocation);\r\n\t\t\t\r\n\t\t\tconst quv = gl.getAttribLocation(quadShaderProgram, 'a_uv');\r\n\t\t\tgl.vertexAttribPointer(quv, 2, gl.FLOAT, false, FSIZE * 4, FSIZE * 2);\r\n\t\t\tgl.enableVertexAttribArray(quv);\r\n\t\t\tconsole.log(\"quv 222\", quv);\r\n\t\t\t\r\n\t\t\tcameraTexture = gl.createTexture(); //创建纹理对象\r\n\t\t\tconsole.log(\"cameraTexture gl.createTexture\", cameraTexture);\r\n\t\t\tif (cameraTexture === null) {\r\n\t\t\t  console.log(\"cameraTexture is null\");\r\n\t\t\t  // return false;\r\n\t\t\t}\r\n\t\t\tgl.activeTexture(gl.TEXTURE0);// 开启0号纹理单元\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, cameraTexture); // 向target绑定纹理对象\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\t\t\tconsole.log(\"cameraTexture \", cameraTexture);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// gl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, res);\r\n\t\t\t\r\n\t\t\t// gl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\t\t  \r\n\t\t\tgl.useProgram(quadShaderProgram);\r\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 6);\r\n\t\t},\r\n\t\tlipRenderPipeline() {\r\n\t\t\tconst FSIZE = 4;\r\n\t\t\tvar vertCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      layout(location = 0) in vec2 a_position;\r\n\t\t\t      layout(location = 1) in vec3 a_uv;\r\n\t\t\t      out vec3 uv_out;\r\n\t\t\t      void main() {\r\n\t\t\t        gl_Position = vec4(a_position, 1.0, 1.0);\r\n\t\t\t        uv_out = a_uv;\r\n\t\t\t        //uv_out = vec2(1.0, 0.0);\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\tconst fragCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      precision mediump float;\r\n\t\t\t      in vec3 uv_out;\r\n\t\t\t      uniform sampler2D u_texture;\r\n\t\t\t      uniform sampler2D u_texture2;\r\n\t\t\t      layout(location = 0) out vec4 outColor;\r\n\t\t\t      void main() {\r\n\t\t\t\r\n\t\t\t        vec2 uv = vec2(uv_out.x, 1.0 - uv_out.y);\r\n\t\t\t        vec3 lipColor = texture(u_texture, uv).xyz;\r\n\t\t\t        vec3 c = lipColor;\r\n\t\t\t        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n\t\t\t        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n\t\t\t        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\t\t\t\r\n\t\t\t        float d = q.x - min(q.w, q.y);\r\n\t\t\t        float e = 1.0e-10;\r\n\t\t\t        vec3 hc = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n\t\t\t\r\n\t\t\t        hc.y *= 1.2;\r\n\t\t\t\r\n\t\t\t        vec4 L = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n\t\t\t        vec3 M = abs(fract(hc.xxx + L.xyz) * 6.0 - L.www);\r\n\t\t\t        vec3 color = hc.z * mix(L.xxx, clamp(M - L.xxx, 0.0, 1.0), hc.y);\r\n\t\t\t\r\n\t\t\t        //outColor = vec4(color, 1.0);\r\n\t\t\t        \r\n\t\t\t        \r\n\t\t\t        //vec4 lipColor = texture(u_texture, uv);\r\n\t\t\t        vec4 frameColor = texture(u_texture2, uv_out.xy);\r\n\t\t\t        //vec3 finalColor = lipColor.xyz * lipColor.w + frameColor.xyz * (1.0 - lipColor.w);\r\n\t\t\t        float alpha = texture(u_texture, uv).w;\r\n\t\t\t        outColor = vec4(color.xyz, alpha * uv_out.z);\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t  \r\n\t\t\tvertShader = gl.createShader(gl.VERTEX_SHADER);\r\n\t\t\t\r\n\t\t\tif (vertShader === null) {\r\n\t\t\t  console.log(\"vertShader is null\");\r\n\t\t\t}\r\n\t\t\tgl.shaderSource(vertShader, vertCode);\r\n\t\t\tgl.compileShader(vertShader);\r\n\t\t\t\r\n\t\t\tconsole.log(\"vertShader is compileShader \");\r\n\t\t\t\r\n\t\t\tfragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\t\t\tgl.shaderSource(fragShader, fragCode);\r\n\t\t\tgl.compileShader(fragShader);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tconsole.log(\"fragShader is compileShader \");\r\n\t\t\tshaderProgram = gl.createProgram();\r\n\t\t\tgl.attachShader(shaderProgram, vertShader);\r\n\t\t\tgl.attachShader(shaderProgram, fragShader);\r\n\t\t\tgl.linkProgram(shaderProgram);\r\n\t\t\tgl.useProgram(shaderProgram);\r\n\t\t\tconsole.log('。。。。初始化着色器是否成功。。。。');\r\n\t\t},\r\n\t\tdrawLip(res){\r\n\t\t\tlipPoints = [];\r\n\t\t\tlet lipPointCount = 106 * 2;\r\n\t\t\tfor (var i = 0; i < lipPointCount; i++) {\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t}\r\n\t\t\tconsole.log(\"lipPoints的值计算开始 \");\r\n\t\t\t\r\n\t\t\tlipPointCount = lipIndex.length;\r\n\t\t\tfor (var i = 0; i < lipPointCount; i++) {\r\n\t\t\t  var index = lipIndex[i];\r\n\t\t\t  lipPoints[i * 5] = this.points[index][0];\r\n\t\t\t  lipPoints[i * 5 + 1] = this.points[index][1];\r\n\t\t\t  lipPoints[i * 5 + 2] = lipTexCoordnate[2 * (index - lipMarkBeginIndex)];\r\n\t\t\t  lipPoints[i * 5 + 3] = lipTexCoordnate[2 * (index - lipMarkBeginIndex) + 1];\r\n\t\t\t  lipPoints[i * 5 + 4] = translucent;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconsole.log(lipMarkBeginIndex,\"lipPoints的值 hah\", lipPoints,lipTexCoordnate);\r\n\t\t\tvertexbuffer = gl.createBuffer();\r\n\t\t\tif (vertexbuffer === null) {\r\n\t\t\t  console.log(\"vertexbuffer is null\");\r\n\t\t\t}\r\n\t\t\tconsole.log('drawFaceLipdrawFaceLip开始gl.ARRAY_BUFFER', vertexbuffer)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tconst FSIZE = 4;\r\n\t\t\tgl.enable(gl.BLEND);\r\n\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.NONE, gl.ONE);\r\n\t\t\tgl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexbuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(lipPoints), gl.STREAM_DRAW);\r\n\t\t\t\r\n\t\t\tconst aposlocation = gl.getAttribLocation(shaderProgram, 'a_position');\r\n\t\t\tgl.enableVertexAttribArray(aposlocation);\r\n\t\t\tgl.vertexAttribPointer(aposlocation, 2, gl.FLOAT, false, FSIZE * 5, 0);\r\n\t\t\tconsole.log(\"aposlocation的值 \", aposlocation);\r\n\t\t\t\r\n\t\t\tconst auv = gl.getAttribLocation(shaderProgram, 'a_uv');\r\n\t\t\tgl.enableVertexAttribArray(auv);\r\n\t\t\tgl.vertexAttribPointer(auv, 3, gl.FLOAT, false, FSIZE * 5, FSIZE * 2);\r\n\t\t\tconsole.log(\"auv的值 \", auv);\r\n\t\t\t\r\n\t\t\t// gl.useProgram(0);\r\n\t\t\t// gl.bindTexture(0);\r\n\t\t\tlipTexture = gl.createTexture();\r\n\t\t\tconsole.log(\"lipTexture gl.createTexture\", lipTexture);\r\n\t\t\tif (lipTexture === null) {\r\n\t\t\t  console.log(\"lipTexture is null\");\r\n\t\t\t  // return false;\r\n\t\t\t}\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, lipTexture);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, res); // 配置纹理图像\r\n\t\t\tconsole.log(\"createTexturecreateTexture \", lipTexture);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tgl.activeTexture(gl.TEXTURE0);\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, lipTexture);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tgl.activeTexture(gl.TEXTURE1);\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\tgl.useProgram(shaderProgram);\r\n\t\t\t\r\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 60);\r\n\t\t},\r\n\t\tinitRenderPipeline() {\r\n\t\t\tvar vertCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      layout(location = 0) in vec2 a_position;\r\n\t\t\t      layout(location = 1) in vec3 a_uv;\r\n\t\t\t      out vec3 uv_out;\r\n\t\t\t      void main() {\r\n\t\t\t        gl_Position = vec4(a_position, 1.0, 1.0);\r\n\t\t\t        uv_out = a_uv;\r\n\t\t\t        //uv_out = vec2(1.0, 0.0);\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\t\r\n\t\t\tconst fragCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      precision mediump float;\r\n\t\t\t      in vec3 uv_out;\r\n\t\t\t      uniform sampler2D u_texture;\r\n\t\t\t      uniform sampler2D u_texture2;\r\n\t\t\t      layout(location = 0) out vec4 outColor;\r\n\t\t\t      void main() {\r\n\t\t\t\r\n\t\t\t        vec2 uv = vec2(uv_out.x, 1.0 - uv_out.y);\r\n\t\t\t        vec3 lipColor = texture(u_texture, uv).xyz;\r\n\t\t\t        vec3 c = lipColor;\r\n\t\t\t        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n\t\t\t        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n\t\t\t        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\t\t\t\r\n\t\t\t        float d = q.x - min(q.w, q.y);\r\n\t\t\t        float e = 1.0e-10;\r\n\t\t\t        vec3 hc = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n\t\t\t\r\n\t\t\t        hc.y *= 1.2;\r\n\t\t\t\r\n\t\t\t        vec4 L = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n\t\t\t        vec3 M = abs(fract(hc.xxx + L.xyz) * 6.0 - L.www);\r\n\t\t\t        vec3 color = hc.z * mix(L.xxx, clamp(M - L.xxx, 0.0, 1.0), hc.y);\r\n\t\t\t\r\n\t\t\t        //outColor = vec4(color, 1.0);\r\n\t\t\t        \r\n\t\t\t        \r\n\t\t\t        //vec4 lipColor = texture(u_texture, uv);\r\n\t\t\t        vec4 frameColor = texture(u_texture2, uv_out.xy);\r\n\t\t\t        //vec3 finalColor = lipColor.xyz * lipColor.w + frameColor.xyz * (1.0 - lipColor.w);\r\n\t\t\t        float alpha = texture(u_texture, uv).w;\r\n\t\t\t        outColor = vec4(color.xyz, alpha * uv_out.z);\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\t\r\n\t\t\tvertShader = gl.createShader(gl.VERTEX_SHADER);\r\n\t\t\tif (vertShader === null) {\r\n\t\t\t  console.log(\"vertShader is null\");\r\n\t\t\t}\r\n\t\t\tgl.shaderSource(vertShader, vertCode);\r\n\t\t\tgl.compileShader(vertShader);\r\n\t\t\t\r\n\t\t\tconsole.log(\"vertShader is compileShader \");\r\n\t\t\t\r\n\t\t\tfragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\t\t\tgl.shaderSource(fragShader, fragCode);\r\n\t\t\tgl.compileShader(fragShader);\r\n\t\t\t\r\n\t\t\tconsole.log(\"fragShader is compileShader \");\r\n\t\t\tshaderProgram = gl.createProgram();\r\n\t\t\tgl.attachShader(shaderProgram, vertShader);\r\n\t\t\tgl.attachShader(shaderProgram, fragShader);\r\n\t\t\tgl.linkProgram(shaderProgram);\r\n\t\t\tgl.useProgram(shaderProgram);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tconsole.log('。。。。初始化着色器是否成功。。。。');\r\n\t\t\t\r\n\t\t\tconst FSIZE = 4;\r\n\t\t\t\r\n\t\t\tvertexbuffer = gl.createBuffer();\r\n\t\t\tif (vertexbuffer === null) {\r\n\t\t\t  console.log(\"vertexbuffer is null\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst aposlocation = gl.getAttribLocation(shaderProgram, 'a_position');\r\n\t\t\tconsole.log(\"a_position的值\", aposlocation);\r\n\t\t\tgl.vertexAttribPointer(aposlocation, 2, gl.FLOAT, false, FSIZE * 5, 0);\r\n\t\t\tgl.enableVertexAttribArray(aposlocation);\r\n\t\t\t\r\n\t\t\tconst auv = gl.getAttribLocation(shaderProgram, 'a_uv');\r\n\t\t\tconsole.log(\"auv的值\", auv);\r\n\t\t\tgl.vertexAttribPointer(auv, 3, gl.FLOAT, false, FSIZE * 5, FSIZE * 2);\r\n\t\t\tgl.enableVertexAttribArray(auv);\r\n\t\t\t\r\n\t\t\tvar quadVertCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      layout(location = 0) in vec2 a_position;\r\n\t\t\t      layout(location = 1) in vec2 a_uv;\r\n\t\t\t      out vec2 uv_out;\r\n\t\t\t      void main() {\r\n\t\t\t        gl_Position = vec4(a_position, 1.0, 1.0);\r\n\t\t\t        uv_out = a_uv;\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\t\r\n\t\t\tconst quadFragCode =\r\n\t\t\t  `#version 300 es\r\n\t\t\t      precision mediump float;\r\n\t\t\t      in vec2 uv_out;\r\n\t\t\t      uniform sampler2D u_texture;\r\n\t\t\t      layout(location = 0) out vec4 outColor;\r\n\t\t\t      void main() {\r\n\t\t\t        vec2 uv = vec2(uv_out.x, uv_out.y);\r\n\t\t\t        outColor = vec4(texture(u_texture, uv).xyz, 1.0);\r\n\t\t\t      }\r\n\t\t\t      `;\r\n\t\t\t\t\r\n\t\t\tquadVertShader = gl.createShader(gl.VERTEX_SHADER);\r\n\t\t\tgl.shaderSource(quadVertShader, quadVertCode);\r\n\t\t\tgl.compileShader(quadVertShader);\r\n\t\t\tconsole.log(\"quadVertShader的值\", quadVertShader);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tquadFragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\t\t\tgl.shaderSource(quadFragShader, quadFragCode);\r\n\t\t\tgl.compileShader(quadFragShader);\r\n\t\t\tconsole.log(\"quadFragShader的值\", quadFragShader);\r\n\t\t\t\r\n\t\t\tquadShaderProgram = gl.createProgram();\r\n\t\t\tgl.attachShader(quadShaderProgram, quadVertShader);\r\n\t\t\tgl.attachShader(quadShaderProgram, quadFragShader);\r\n\t\t\tgl.linkProgram(quadShaderProgram);\r\n\t\t\tgl.useProgram(quadShaderProgram);\r\n\t\t\tconsole.log(\"quadShaderProgram 渲染成功否\");\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tquadVertexbuffer = gl.createBuffer();\r\n\t\t\tconsole.log(\"quadVertexbuffer\", quadVertexbuffer);\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, quadVertexbuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, quadVertex, gl.STATIC_DRAW);\r\n\t\t\t\r\n\t\t\tconst qposlocation = gl.getAttribLocation(quadShaderProgram, 'a_position');\r\n\t\t\tgl.enableVertexAttribArray(qposlocation);\r\n\t\t\tgl.vertexAttribPointer(qposlocation, 2, gl.FLOAT, false, FSIZE * 4, 0);\r\n\t\t\tconsole.log(\"qposlocation\", qposlocation);\r\n\t\t\t\r\n\t\t\tconst quv = gl.getAttribLocation(quadShaderProgram, 'a_uv');\r\n\t\t\tgl.enableVertexAttribArray(quv);\r\n\t\t\tgl.vertexAttribPointer(quv, 2, gl.FLOAT, false, FSIZE * 4, FSIZE * 2);\r\n\t\t\tconsole.log(\"quv 222\", quv);\r\n\t\t\t\r\n\t\t\tgl.useProgram(0);\r\n\t\t\t\r\n\t\t\tlipTexture = gl.createTexture();\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, lipTexture);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\t\t\tconsole.log(\"createTexturecreateTexture \", lipTexture);\r\n\t\t\t\r\n\t\t\tcameraTexture = gl.createTexture();\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\t\t\tconsole.log(\"cameraTexture \", cameraTexture);\r\n\t\t\t\r\n\t\t\tgl.bindTexture(0);\r\n\t\t\t\r\n\t\t\tlipPoints = [];\r\n\t\t\tconst lipPointCount = 106 * 2;\r\n\t\t\tfor (var i = 0; i < lipPointCount; i++) {\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t  lipPoints.push(0.0);\r\n\t\t\t}\r\n\t\t\tconsole.log(\"lipPoints的值 \", lipPoints);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlipPointsIndex = [];\r\n\t\t\tconst lipPointsIndexCount = lipIndex.length;\r\n\t\t\tfor (var i = 0; i < lipPointsIndexCount; i++) {\r\n\t\t\t  lipPointsIndex.push(i);\r\n\t\t\t}\r\n\t\t\tconsole.log(\"lipPointsIndex的值 \", lipPointsIndex);\r\n\t\t},\r\n\t\treleaseRenderFacePoints() {\r\n\t\t\t// gl.deleteShader(this.facePoints.vertShader);\r\n\t\t\t// gl.deleteShader(this.facePoints.fragShader);\r\n\t\t\t// gl.deleteProgram(this.facePoints.shaderProgram);\r\n\t\t},\r\n\t\treleaseRenderResource() {\r\n\t\t\tgl.deleteShader(vertShader);\r\n\t\t\tgl.deleteShader(fragShader);\r\n\t\t\tgl.deleteProgram(shaderProgram);\r\n\t\t\tgl.deleteShader(quadVertShader);\r\n\t\t\tgl.deleteShader(quadFragShader);\r\n\t\t\tgl.deleteProgram(quadShaderProgram);\r\n\t\t\tgl.deleteBuffer(vertexbuffer);\r\n\t\t\tgl.deleteTexture(lipTexture);\r\n\t\t\tgl.deleteTexture(cameraTexture);\r\n\t\t\tthis.releaseRenderFacePoints();\r\n\t\t},\r\n\r\n\t\tdrawFaceLip(points) {\r\n\t\t\tconsole.log(translucent,'drawFaceLipdrawFaceLip开始', points)\r\n\t\t\tconst lipPointCount = lipIndex.length;\r\n\t\t\tfor (var i = 0; i < lipPointCount; i++) {\r\n\t\t\t  var index = lipIndex[i];\r\n\t\t\t  lipPoints[i * 5] = points[index][0];\r\n\t\t\t  lipPoints[i * 5 + 1] = points[index][1];\r\n\t\t\t  lipPoints[i * 5 + 2] = lipTexCoordnate[2 * (index - lipMarkBeginIndex)];\r\n\t\t\t  lipPoints[i * 5 + 3] = lipTexCoordnate[2 * (index - lipMarkBeginIndex) + 1];\r\n\t\t\t  lipPoints[i * 5 + 4] = translucent;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconsole.log('drawFaceLipdrawFaceLip开始gl.ARRAY_BUFFER', vertexbuffer)\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexbuffer);\r\n\t\t\tconsole.log('drawFaceLipdrawFaceLip lipPoints', points)\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(lipPoints), gl.STREAM_DRAW);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tgl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\r\n\t\t\t// gl.disable(gl.DEPTH_TEST);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// gl.disable(gl.DEPTH_WRITE);\r\n\t\t\t// gl.enable(gl.GL_CULL_FACE);\r\n\t\t\t// gl.frontFace(gl.CW);\r\n\t\t\tconsole.log('drawFaceLipdrawFaceLip gl.frontFace')\r\n\t\t\tconst FSIZE = 4;\r\n\t\t\t\r\n\t\t\t//Pass one\r\n\t\t\t// gl.disable(gl.BLEND);\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, quadVertexbuffer);\r\n\t\t\t\r\n\t\t\tconst qposlocation = gl.getAttribLocation(quadShaderProgram, 'a_position');\r\n\t\t\t\r\n\t\t\tgl.vertexAttribPointer(qposlocation, 2, gl.FLOAT, false, FSIZE * 4, 0);\r\n\t\t\tgl.enableVertexAttribArray(qposlocation);\r\n\t\t\t\r\n\t\t\tconst quv = gl.getAttribLocation(quadShaderProgram, 'a_uv');\r\n\t\t\t\r\n\t\t\tgl.vertexAttribPointer(quv, 2, gl.FLOAT, false, FSIZE * 4, FSIZE * 2);\r\n\t\t\tgl.enableVertexAttribArray(quv);\r\n\t\t\t\r\n\t\t\tgl.activeTexture(gl.TEXTURE0);\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\tgl.useProgram(quadShaderProgram);\r\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 6);\r\n\t\t\t\r\n\t\t\t//Pass two\r\n\t\t\tgl.enable(gl.BLEND);\r\n\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.NONE, gl.ONE);\r\n\t\t\tgl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexbuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(lipPoints), gl.STREAM_DRAW);\r\n\t\t\t\r\n\t\t\tconst aposlocation = gl.getAttribLocation(shaderProgram, 'a_position');\r\n\t\t\tgl.enableVertexAttribArray(aposlocation);\r\n\t\t\tgl.vertexAttribPointer(aposlocation, 2, gl.FLOAT, false, FSIZE * 5, 0);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tconst auv = gl.getAttribLocation(shaderProgram, 'a_uv');\r\n\t\t\tgl.enableVertexAttribArray(auv);\r\n\t\t\tgl.vertexAttribPointer(auv, 3, gl.FLOAT, false, FSIZE * 5, FSIZE * 2);\r\n\t\t\t\r\n\t\t\tgl.activeTexture(gl.TEXTURE0);\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, lipTexture);\r\n\t\t\tgl.activeTexture(gl.TEXTURE1);\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\tgl.useProgram(shaderProgram);\r\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, 60);\r\n\t\t},\r\n\t\t changeLipStyle(lipTexturePath) {\r\n\t\t\t//let imgPath = '/static/images/lipColor.png';\r\n\t\t\t// //唇彩图片\r\n\t\t\t// var img;\r\n\t\t\t// //唇彩图片路径\r\n\t\t\t// var imgPath;\r\n\t\t\t\r\n\t\t\treturn new Promise((resolve,reject)=>{\r\n\t\t\t\tconsole.log(this.canvas, '......图片.this.canvas.', lipTexturePath);\r\n\t\t\t\tlet imgPath = lipTexturePath;\r\n\t\t\t\tlet img1 = canvas.createImage();\r\n\t\t\t\timg1.onload =  (res) => {\r\n\t\t\t\t\t// this.initRenderPipeline();\r\n\t\t\t\t\t// gl.bindTexture(gl.TEXTURE_2D, lipTexture);\r\n\t\t\t\t\t// gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\r\n\t\t\t\t\tresolve(img1)\r\n\t\t\t\t\t\r\n\t\t\t\t\tconsole.log(lipTexture,'......图片..', res, img);\r\n\t\t\t\t\t\r\n\t\t\t\t};\r\n\t\t\t\timg1.onerror = res => {\r\n\t\t\t\t\tconsole.log('......图片错误..', res, img);\r\n\t\t\t\t\treject(res)\r\n\t\t\t\t};\r\n\t\t\t\timg1.src = imgPath;\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// let poster = this.canvas.createImage();\r\n\t\t\t// wx.getImageInfo({\r\n\t\t\t//    src: lipTexturePath, //图片的网络地址\r\n\t\t\t//    success: (res) => {\r\n\t\t\t//      poster.src = res.path //图片缓存地址\r\n\t\t\t//      poster.onload = (e) => {\r\n\t\t\t//        // ctx.drawImage(poster, 0, 0, 200, 200)\r\n\t\t\t// \t\tconsole.log(lipTexture, '......图片..', e, poster);\r\n\t\t\t//      }\r\n\t\t\t//    }\r\n\t\t\t// })\r\n\t\t},\r\n\r\n\t\tupdateFaceData(data, width, height) {\r\n\t\t\tvar dataFrame = new Uint8Array(data);\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, dataFrame);\r\n\t\t},\r\n\t\tupdateFaceData1() {\r\n\t\t\treturn new Promise((resolve,reject)=>{\r\n\t\t\t\tuni.getImageInfo({\r\n\t\t\t\t\tsrc: this.imgModel,\r\n\t\t\t\t\tsuccess: res => {\r\n\t\t\t\t\t\tconsole.log('getImageInfo  updateFaceData1', res);\r\n\t\t\t\t\t\tuni.getFileSystemManager().readFile({\r\n\t\t\t\t\t\t\tfilePath: res.path, // 选择图片返回的相对路径\r\n\t\t\t\t\t\t\t// encoding: 'base64', // 编码格式\r\n\t\t\t\t\t\t\tsuccess: res1 => {\r\n\t\t\t\t\t\t\t\t// 成功的回调\r\n\t\t\t\t\t\t\t\tconsole.log(res.width,'--将图片图片转为base64方法toBase64  success--', res1.data);\r\n\t\t\t\t\t\t\t\tvar dataFrame = new Uint8Array(res1.data);\r\n\t\t\t\t\t\t\t\t// gl.bindTexture(gl.TEXTURE_2D, cameraTexture);\r\n\t\t\t\t\t\t\t\t// gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, res.width, res.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, dataFrame);\r\n\t\t\t\t\t\t\t\tresolve({data:dataFrame,width:res.width,height:res.height})\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tfail: err => {\r\n\t\t\t\t\t\t\t\tconsole.log('--将图片图片转为base64方法toBase64 fail--', err);\r\n\t\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfail: (err) => {\r\n\t\t\t\t\t\tconsole.log('--getImageInfo  updateFaceData1 fail--', err);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t\r\n\t\t},\r\n\t\tdrawFacePoints(points) {\r\n\t\t\tconsole.log('drawFacePoints。。。',points,points.length)\r\n\t\t    var pointCount = points.length;\r\n\t\t    if (pointCount == 0) return;\r\n\t\t    var vertices = [];\r\n\t\t    for (var i = 0; i < pointCount; i++) {\r\n\t\t      vertices.push(points[i][0]);\r\n\t\t      vertices.push(points[i][1]);\r\n\t\t      vertices.push(0.0);\r\n\t\t    }\r\n\t\t\r\n\t\t    // Create an empty buffer object to store the vertex buffer\r\n\t\t    var vertex_buffer = gl.createBuffer(); \r\n\t\t\tconsole.log('。vertex_buffer。。。')\r\n\t\t    //Bind appropriate array buffer to it\r\n\t\t    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer); \r\n\t\t\r\n\t\t    // Pass the vertex data to the buffer\r\n\t\t    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW); \r\n\t\t    // Unbind the buffer\r\n\t\t    gl.bindBuffer(gl.ARRAY_BUFFER, null); \r\n\t\tconsole.log('。Unbind the buffer。。。')\r\n\t\t    /*=========================Shaders========================*/\r\n\t\t\r\n\t\t    // vertex shader source code\r\n\t\t    var vertCode =\r\n\t\t      'attribute vec3 coordinates;' +\r\n\t\t\r\n\t\t      'void main(void) {' +\r\n\t\t         ' gl_Position = vec4(coordinates, 1.0);' +\r\n\t\t         'gl_PointSize = 10.0;'+\r\n\t\t      '}';\r\n\t\t\r\n\t\t    // Create a vertex shader object\r\n\t\t    var vertShader = gl.createShader(gl.VERTEX_SHADER);\r\n\t\t\r\n\t\t    // Attach vertex shader source code\r\n\t\t    gl.shaderSource(vertShader, vertCode);\r\n\t\t\r\n\t\t    // Compile the vertex shader\r\n\t\t    gl.compileShader(vertShader);\r\n\t\t\r\n\t\t    // fragment shader source code\r\n\t\t    var fragCode =\r\n\t\t      'void main(void) {' +\r\n\t\t         ' gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);' +\r\n\t\t      '}';\r\n\t\t\r\n\t\t    // Create fragment shader object\r\n\t\t    var fragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\t\t\r\n\t\t    // Attach fragment shader source code\r\n\t\t    gl.shaderSource(fragShader, fragCode);\r\n\t\t\r\n\t\t    // Compile the fragmentt shader\r\n\t\t    gl.compileShader(fragShader);\r\n\t\t\r\n\t\t    // Create a shader program object to store\r\n\t\t    // the combined shader program\r\n\t\t    var shaderProgram = gl.createProgram();\r\n\t\t\r\n\t\t    // Attach a vertex shader\r\n\t\t    gl.attachShader(shaderProgram, vertShader); \r\n\t\t\r\n\t\t    // Attach a fragment shader\r\n\t\t    gl.attachShader(shaderProgram, fragShader);\r\n\t\t\r\n\t\t    // Link both programs\r\n\t\t    gl.linkProgram(shaderProgram);\r\n\t\t\r\n\t\t    // Use the combined shader program object\r\n\t\t    gl.useProgram(shaderProgram);\r\n\t\t\r\n\t\t    /*======== Associating shaders to buffer objects ========*/\r\n\t\t\r\n\t\t    // Bind vertex buffer object\r\n\t\t    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\r\n\t\t\r\n\t\t    // Get the attribute location\r\n\t\t    var coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\r\n\t\tconsole.log('。coord。。。',coord)\r\n\t\t    // Point an attribute to the currently bound VBO\r\n\t\t    gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\r\n\t\t\r\n\t\t    // Enable the attribute\r\n\t\t    gl.enableVertexAttribArray(coord);\r\n\t\t\r\n\t\t    gl.clearColor(0.0,0.0,0.0,0.0);\r\n\t\t    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\t\t    // Draw the triangle\r\n\t\t    gl.drawArrays(gl.POINTS, 0, pointCount);\r\n\t\t  },\r\n\t\tdrawFacePoints11(points) {\r\n\t\t\tvar pointCount = points.length;\r\n\t\t\tif (pointCount == 0) return;\r\n\t\t\tvar vertices = [];\r\n\t\t\tfor (var i = 0; i < pointCount; i++) {\r\n\t\t\t  vertices.push(points[i][0]);\r\n\t\t\t  vertices.push(points[i][1]);\r\n\t\t\t  vertices.push(0.0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Create an empty buffer object to store the vertex buffer\r\n\t\t\tvar vertex_buffer = gl.createBuffer(); \r\n\t\t\t\r\n\t\t\t//Bind appropriate array buffer to it\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer); \r\n\t\t\t\r\n\t\t\t// Pass the vertex data to the buffer\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW); \r\n\t\t\t// Unbind the buffer\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null); \r\n\t\t\t\r\n\t\t\t/*=========================Shaders========================*/\r\n\t\t\t\r\n\t\t\t// vertex shader source code\r\n\t\t\tvar vertCode =\r\n\t\t\t  `attribute vec3 coordinates;\r\n\t\t\t  void main(void) {\r\n\t\t\t  \tgl_Position = vec4(coordinates, 1.0);\r\n\t\t\t  \tgl_PointSize = 5.0;\r\n\t\t\t  }`;\r\n\t\t\t\r\n\t\t\t// Create a vertex shader object\r\n\t\t\tvar vertShader = gl.createShader(gl.VERTEX_SHADER);\r\n\t\t\t\r\n\t\t\t// Attach vertex shader source code\r\n\t\t\tgl.shaderSource(vertShader, vertCode);\r\n\t\t\t\r\n\t\t\t// Compile the vertex shader\r\n\t\t\tgl.compileShader(vertShader);\r\n\t\t\t\r\n\t\t\t// fragment shader source code\r\n\t\t\tvar fragCode =\r\n\t\t\t  `precision mediump float;\r\n\t\t\t\t\t\tuniform vec4 u_FragColor;\r\n\t\t\t\t\t\tvoid main(){\r\n\t\t\t\t\t\t    gl_FragColor=u_FragColor;\r\n\t\t\t\t\t\t}`;\r\n\t\t\t\r\n\t\t\t// Create fragment shader object\r\n\t\t\tvar fragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\t\t\t\r\n\t\t\t// Attach fragment shader source code\r\n\t\t\tgl.shaderSource(fragShader, fragCode);\r\n\t\t\t\r\n\t\t\t// Compile the fragmentt shader\r\n\t\t\tgl.compileShader(fragShader);\r\n\t\t\t\r\n\t\t\t// Create a shader program object to store\r\n\t\t\t// the combined shader program\r\n\t\t\tvar shaderProgram = gl.createProgram();\r\n\t\t\t\r\n\t\t\t// Attach a vertex shader\r\n\t\t\tgl.attachShader(shaderProgram, vertShader); \r\n\t\t\t\r\n\t\t\t// Attach a fragment shader\r\n\t\t\tgl.attachShader(shaderProgram, fragShader);\r\n\t\t\t\r\n\t\t\t// Link both programs\r\n\t\t\tgl.linkProgram(shaderProgram);\r\n\t\t\t\r\n\t\t\t// Use the combined shader program object\r\n\t\t\tgl.useProgram(shaderProgram);\r\n\t\t\t\r\n\t\t\t/*======== Associating shaders to buffer objects ========*/\r\n\t\t\t\r\n\t\t\t// Bind vertex buffer object\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\r\n\t\t\t\r\n\t\t\t// Get the attribute location\r\n\t\t\tvar coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\r\n\t\t\t\r\n\t\t\t// Point an attribute to the currently bound VBO\r\n\t\t\tgl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\r\n\t\t\t\r\n\t\t\t// Enable the attribute\r\n\t\t\tgl.enableVertexAttribArray(coord);\r\n\t\t\t\r\n\t\t\t//获取uniform 变量\r\n\t\t\tconst u_FragColor = gl.getUniformLocation(shaderProgram, \"u_FragColor\");\r\n\t\t\tlet rgba = this.isShowFacePoints ? 1.0 : 0.0;\r\n\t\t\t//修改uniform 变量\r\n\t\t\tgl.uniform4f(u_FragColor, 1.0, 0.0, 0.0, 1.0);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tgl.clearColor(0.0,0.0,0.0,0.0);\r\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\r\n\t\t\t// Draw the triangle\r\n\t\t\tgl.drawArrays(gl.POINTS, 0, pointCount);\r\n\t\t},\r\n\t\t renderImg() {\r\n\t\t    let imgpath = this.imgModel;\r\n\t\t    console.log(imgpath, 'imgpath');\r\n\t\t    let canvas = this.canvas;\r\n\t\t    let gl = this.gl;\r\n\t\t    let img = canvas.createImage();\r\n\t\t    img.onload = (r) => {\r\n\t\t      console.log('图片加载成功', r)\r\n\t\t\r\n\t\t      if (!this.initShader(gl)) {\r\n\t\t        console.log('initShader is failed，初始化着色器失败')\r\n\t\t        return;\r\n\t\t      }\r\n\t\t      if (!this.initVertexs(gl)) {\r\n\t\t        console.log('drawVertexs is failed 设置顶点的相关信息失败 ')\r\n\t\t        return;\r\n\t\t      }\r\n\t\t      if (!this.initTextures(gl, img)) {\r\n\t\t        console.log('drawTextures is failed 无法配置纹理')\r\n\t\t        return;\r\n\t\t      }\r\n\t\t\r\n\t\t      console.log('gl.drawArrays');\r\n\t\t      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n\t\t    }\r\n\t\t    img.onerror = function (r) {\r\n\t\t      console.log('onError', r)\r\n\t\t    }\r\n\t\t    img.src = imgpath;\r\n\t\t\r\n\t\t\r\n\t\t  },\r\n\t\t  initShader(gl) {\r\n\t\t\r\n\t\t    /*=========================Shaders========================*/\r\n\t\t    let vertexShader = gl.createShader(gl.VERTEX_SHADER);// 创建顶点着色器\r\n\t\t    gl.shaderSource(vertexShader, VSHADER_SOURCE);// 绑定顶点着色器源码\r\n\t\t    gl.compileShader(vertexShader);// 编译定点着色器\r\n\t\t\r\n\t\t    let fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);// 创建片元着色器\r\n\t\t    gl.shaderSource(fragmentShader, FSHADER_SOURCE);// 绑定片元着色器源码\r\n\t\t    gl.compileShader(fragmentShader);// 编译片元着色器\r\n\t\t\r\n\t\t\r\n\t\t    let shaderProgram = gl.createProgram();// 创建着色器程序\r\n\t\t    gl.attachShader(shaderProgram, vertexShader);// 指定顶点着色器\r\n\t\t    gl.attachShader(shaderProgram, fragmentShader);// 指定片元着色色器\r\n\t\t\r\n\t\t    gl.linkProgram(shaderProgram);// 链接程序\r\n\t\t    gl.useProgram(shaderProgram);//使用着色器\r\n\t\t    gl.program = shaderProgram;\r\n\t\t    return true\r\n\t\t  },\r\n\t\t  initVertexs(gl, img) {\r\n\t\t    // Create an empty buffer object to store the vertex buffer 创建缓冲区对象(gl.createBuffer())\r\n\t\t    let vertexsBuffer = gl.createBuffer();\r\n\t\t\r\n\t\t\r\n\t\t    if (vertexsBuffer === null) {\r\n\t\t      console.log(\"vertexsBuffer is null\");\r\n\t\t      return false;\r\n\t\t    }\r\n\t\t    // 绑定缓冲区对象(gl.bindBuffer(target, buffer))\r\n\t\t    gl.bindBuffer(gl.ARRAY_BUFFER, vertexsBuffer);\r\n\t\t\r\n\t\t    // 将数据写入缓冲区对象(gl.bufferData()) WebGL 不支持直接使用 JavaScript 原始数组类型，需要转换\r\n\t\t    gl.bufferData(gl.ARRAY_BUFFER, this.vertexs, gl.STATIC_DRAW);\r\n\t\t\r\n\t\t    let a_Position = gl.getAttribLocation(gl.program, \"a_position\");\r\n\t\t    console.log(\"a_Position 的值\", a_Position);\r\n\t\t\r\n\t\t    if (a_Position < 0) {\r\n\t\t      console.log(\"a_Position < 0\");\r\n\t\t      return false;\r\n\t\t    }\r\n\t\t\r\n\t\t    let a_TexCoord = gl.getAttribLocation(gl.program, \"a_texCoord\");\r\n\t\t    console.log(\"a_TexCoord的值\", a_TexCoord);\r\n\t\t    if (a_TexCoord < 0) {\r\n\t\t      console.log(\"a_TexCoord < 0\");\r\n\t\t      return false;\r\n\t\t    }\r\n\t\t\r\n\t\t    console.log(\"this.vertexs\", this.vertexs, 'BYTES_PER_ELEMENT:\\\\', this.vertexs.BYTES_PER_ELEMENT);\r\n\t\t    // gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\r\n\t\t    //将顶点坐标的位置赋值\r\n\t\t    gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, this.vertexs.BYTES_PER_ELEMENT * 5, 0);\r\n\t\t    // 赋能-批处理\r\n\t\t    gl.enableVertexAttribArray(a_Position);\r\n\t\t\r\n\t\t    //将纹理坐标赋值\r\n\t\t    gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, this.vertexs.BYTES_PER_ELEMENT * 5, this.vertexs.BYTES_PER_ELEMENT * 3);\r\n\t\t    gl.enableVertexAttribArray(a_TexCoord);\r\n\t\t\r\n\t\t    return true;\r\n\t\t  },\r\n\t\t  initTextures(gl, img) {\r\n\t\t\r\n\t\t    let textureId = gl.createTexture(); //创建纹理对象\r\n\t\t\r\n\t\t    if (textureId === null) {\r\n\t\t      console.log(\"textureId is null\");\r\n\t\t      return false;\r\n\t\t    }\r\n\t\t\r\n\t\t\r\n\t\t    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // 对纹理图像进行y轴反转\r\n\t\t    gl.activeTexture(gl.TEXTURE0); // 开启0号纹理单元\r\n\t\t    gl.bindTexture(gl.TEXTURE_2D, textureId); // 向target绑定纹理对象\r\n\t\t    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); // 配置纹理参数\r\n\t\t    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\t\t    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\t\t\r\n\t\t    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img); // 配置纹理图像\r\n\t\t\r\n\t\t    let u_image = gl.getUniformLocation(gl.program, \"u_image\");\r\n\t\t    if (u_image < 0) {\r\n\t\t      console.log(\"u_image < 0\");\r\n\t\t      return false;\r\n\t\t    }\r\n\t\t    gl.uniform1i(u_image, 0); // 将0号纹理传递给着色器\r\n\t\t\r\n\t\t    return true\r\n\t\t  },\r\n\t},\r\n\tmounted() {},\r\n\tonShow() {\r\n\t\t// this.$nextTick(() => {\r\n\t\t// \tthis.$refs.brightness.getScreenBrightness()\r\n\t\t// })\r\n\t},\r\n\tasync onLoad() {},\r\n\tbeforeDestroy() {\r\n\t\t// 退出释放资源\r\n\t\tthis.releaseRenderResource();\r\n\t},\r\n\tonShareAppMessage(){},\r\n\tonShareTimeline(){\r\n\t\treturn{\r\n\t\t          title: '自定义转发标题',\r\n\t\t          query: '?openid=123',\r\n\t\t          imageUrl:''\r\n\t\t      }\r\n\t},\r\n\tonUnload() {},\r\n\tonHide() {}\r\n};\r\n</script>\r\n<style>\r\n.container {\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n}\r\n.mode-img {\r\n\tposition: absolute;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n}\r\n#arcanvas {\r\n\tposition: absolute;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tz-index: 11;\r\n}\r\n</style>\n","import mod from \"-!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../../软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1667991055039\n      var cssReload = require(\"E:/软件/HBuilderX.3.3.11.20220209/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}